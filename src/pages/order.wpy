<template>
  <view>
    <!-- tab模块 -->
    <view class="swiper-tab-pd">
      <tab @currentTab.user="getCurrentTab" :tabList.sync="tabList" :currentTab.sync="currentTab"></tab>
    </view>
    <scroll-view scroll-y="true" class="swiper-item-box" style="height:{{winHeight - 31}}px" bindscrolltolower="onReachBottom">
      <orderItem :orders.sync="orders"></orderItem>
      <!-- 加载更多时动画 -->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <!-- 暂无数据显示 -->
      <placeholder :show.sync="is_empty" message="暂无订单数据"></placeholder>
    </scroll-view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import tip from '../utils/tip';
  import Tab from '../components/tab'
  import {
    SYSTEM_INFO,
    USER_SPECICAL_INFO
  } from '../utils/constant';
  import OrderItem from '../components/order_item'
  import BottomLoadMore from "../components/common/bottomLoadMore"
  import Placeholder from "../components/common/placeholder"
  import api from '../api/api';
  export default class Order extends wepy.page {
    config = {
      navigationBarTitleText: "我的订单",
    }
    components = {
      tab: Tab,
      orderItem: OrderItem,
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder
    }
    data = {
      winHeight: 0,
      totalCount: 0,
      tabList: ["全部订单", "待支付", "待收货", "已完成"],
      orders: [],
      currentPage: 1,
      is_empty: false,
      orderStatus: 0,
      currentTab: 0,
      flag: 0,
      showLoading: true,  // 是否显示底部 loading
      preventRepeatReuqest: false,  // 防止重复加载
      pendingPayCount: 0,  // 待付款
      backrdersCount: 0,  // 待发货
      shippedCount: 0,  // 待收货
      receiveFlg: 0
    }
    async getMyOrder(currentPage, size, refresh) {
      console.log("refresh 值: %s, orderStatus 值: %s", refresh, this.orderStatus);
      let that = this;
      let openid = this.$parent.globalData.userSpecialInfo.openid;
      const json = await api.getMyOrderList({
        query: {
          openid: openid,
          order_status: that.orderStatus,
          receive_flag: that.receiveFlg,
          page: currentPage || 1,
          size: size || 10,
          type: 1  // 正常单
        }
      });
      console.log('我的所有订单: ', json.data);
      if (json.data.code == 0) {
        that.orders = refresh ? json.data.list : [...that.orders, ...json.data.list];
        that.page_total = json.data.page_total;
        that.total_count = json.data.total_count;
        that.is_empty = that.total_count == 0  // 暂无数据
        that.getMyOrderSize(that.orders);
      } else {
        tip.error(json.data.msg)
      }
      that.showLoading = false;
      that.$apply();
    }
    async getMyOrderSize(orders) {
      console.log("订单数量统计");
      let pendingPayCount, backrdersCount, shippedCount = 0;
      orders.forEach(order => {
        switch (order.receive) {
          case 1:
            pendingPayCount++;  // 待付款
            break;
          case 2:
            backrdersCount++;   // 待发货
            break;
          case 3:
            shippedCount++;     // 待收货
            break;
          default:
            break;
        }
      });
      var dotList = ["全部订单", {
        name: "待支付",
        dotNum: this.pendingPayCount = pendingPayCount
      }, {
        name: "待收货",
        dotNum: this.backrdersCount = backrdersCount
      }, "已完成"];
      this.$invoke("tab", "changeList", dotList);
      this.$apply();
      // let that = this;
      // let openId = this.$parent.globalData.userSpecialInfo.openid;
      // const json = await api.getMyOrderSize({
      //   query: {
      //     openId: openId
      //   }
      // });
      // if (json.data.code == 0) {
      //   that.pendingPayCount = json.data.pendingPayCount;  // 待付款
      //   that.backrdersCount = json.data.backrdersCount;  // 待发货
      //   that.shippedCount = json.data.shippedCount;  // 待收货
      //   // 重写 list
      //   var dotList = ["全部订单", {
      //     name: "待支付",
      //     dotNum: that.pendingPayCount
      //   }, {
      //     name: "待收货",
      //     dotNum: that.backrdersCount
      //   }, "已完成"];
      //   this.$invoke("tab", "changeList", dotList);
      //   that.$apply();
      // }
    }
    onLoad(options) {
      this.orders = [];  // 重置订单列表
      this.currentTab = options.type;  // 设置页面加载时激活的 tab
      this.getMyOrder();  // 获取我的订单
      this.winHeight = this.$parent.globalData.systemInfo.windowHeight;  // 设置滚动高度
      this.$apply();
    }
    computed = {}
    methods = {
      getCurrentTab(current, event) {
        this.currentPage = 1;
        this.page_total = 0;
        this.orders = [];
        let that = this;
        that.currentTab = current;
        console.log('current: ', current);
        if (current == 0) {
          console.log("所有订单类型");
          that.orderStatus = "";

        } else if (current == 1) {
          console.log("未付款订单类型");
          that.orderStatus = 0;

        } else if (current == 2) {
          console.log("待收货订单类型");
          that.orderStatus = 2;
          that.receiveFlg = 2;

        } else if (current == 3) {
          console.log("已完成订单类型");
          that.orderStatus = 4;
          that.receiveFlg = 4;

        }
        that.orderStatus = current;
        that.getMyOrder();

        // switch (this.currentTab) {
        //   case 1:
        //     console.log("未付款订单类型");
        //     that.orderStatus = 0;
        //     break;
        //   case 2:
        //     console.log("待发货订单类型");
        //     that.orderStatus = 2;
        //     that.receiveFlg = 2;
        //     break;
        //   case 3:
        //     console.log("已完成订单类型");
        //     that.orderStatus = 4;
        //     break;
        //   default:
        //     console.log("所有订单类型");
        //     break;
        // }
        that.$apply();
      },
      /**
       * 滑动切换tab
       */
      bindChange(e) {
        let that = this;
        that.currentTab = e.detail.current;
        console.log("change tab...." + e.detailcurrent);
        that.$apply();
      },
    }
    events = {
      refreshOrderList(msg) {
        console.log("msg值:" + msg);
        if (msg == 3) {
          this.currentTab = 3;
          this.$apply();
          this.orderStatus = 4;
        }
        this.getMyOrder(1, 10, 1);
      }
    }
    watch = {
      currentTab(val) {
        console.log("====" + val)
      }
    }
    //加载更多
    onReachBottom() {
      console.log("加载更多");
      let that = this;
      that.showLoading = true;
      console.log(that.page_total + "232===" + that.currentPage);
      //判断总页数是否大于翻页数
      if ((that.page_total) > that.currentPage) {
        //防止重复加载
        if (that.preventRepeatReuqest) {
          return true;
        }
        that.preventRepeatReuqest = true;
        that.currentPage++;
        console.log(this.currentTab);
        if (this.currentTab == 0) {
          console.log("所有订单类型");
          that.getMyOrder(that.currentPage);
        } else if (this.currentTab == 1) {
          console.log("未付款订单类型");
          that.orderStatus = 0;
          that.getMyOrder(that.currentPage);
        } else if (this.currentTab == 2) {
          console.log("待发货订单类型");
          that.orderStatus = 2;
          that.receiveFlg = 2;
          that.getMyOrder(that.currentPage);
        } else if (this.currentTab == 3) {
          console.log("已完成订单类型");
          that.orderStatus = 4;
          that.getMyOrder(that.currentPage);
        }
        that.preventRepeatReuqest = false;
      } else {
        that.showLoading = false;
      }
    };
  }
</script>

<style lang="less">
  .swiper-tab-pd {
    padding: 0 30rpx;
    background: #fff;
  }
  .swiper-tab-order.active {
    color: #ff4856;
    border-bottom: 5rpx solid #ff4856;
  }
</style>
